
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author c29-parker
 */
public class BruteForcePassword extends javax.swing.JFrame {

    /**
     * Creates new form BruteForcePassword
     */
    public BruteForcePassword() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bruteForceMethod = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        input = new javax.swing.JTextField();
        Force = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textOutput = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Force.setText("Break");
        Force.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ForceMouseClicked(evt);
            }
        });

        textOutput.setColumns(20);
        textOutput.setRows(5);
        jScrollPane1.setViewportView(textOutput);

        jTextField1.setEditable(false);
        jTextField1.setText("Select Brute Force Method on Right");

        jTextField2.setEditable(false);
        jTextField2.setText("Enter Hashed Password to Break Below");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Simple", "Simple Threaded", "Dictionary", "Dictionary Threaded", "Rainbow" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(input)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(454, 454, 454)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Force))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Force))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/****************************************************************
* Function name     : initialiseMaps
*    returns        : void
*    arg1           : N/A
* Created by        : Connor Parker
* Created on        : 05/11/2018
* Description       : Map of all characters that may be in the password for use in other functions
* Notes             : N/A
***************************************************************/
    Map unsorted = new HashMap();
    Map sorted   = new HashMap();
    
    private void initialiseMaps()
    {
        // unsorted has characters listed a to z, 0 to 9 and has space and no space
        unsorted.put(0,"");
        unsorted.put(1," ");
        unsorted.put(2,"a");
        unsorted.put(3,"b");
        unsorted.put(4,"c");
        unsorted.put(5,"d");
        unsorted.put(6,"e");
        unsorted.put(7,"f");
        unsorted.put(8,"g");
        unsorted.put(9,"h");
        unsorted.put(10,"i");
        unsorted.put(11,"j");
        unsorted.put(12,"k");
        unsorted.put(13,"l");
        unsorted.put(14,"m");
        unsorted.put(15,"n");
        unsorted.put(16,"o");
        unsorted.put(17,"p");
        unsorted.put(18,"q");
        unsorted.put(19,"r");
        unsorted.put(20,"s");
        unsorted.put(21,"t");
        unsorted.put(22,"u");
        unsorted.put(23,"v");
        unsorted.put(24,"w");
        unsorted.put(25,"x");
        unsorted.put(26,"y");
        unsorted.put(27,"z");
        unsorted.put(28,"0");
        unsorted.put(29,"1");
        unsorted.put(30,"2");
        unsorted.put(31,"3");
        unsorted.put(32,"4");
        unsorted.put(33,"5");
        unsorted.put(34,"6");
        unsorted.put(35,"7");
        unsorted.put(36,"8");
        unsorted.put(37,"9");
        
        // sorted has characters listed 
        // a to z listed in most common as per https://en.oxforddictionaries.com/explore/which-letters-are-used-most/ 
        // 0 to 9 listed in most common as per https://www.scientificamerican.com/article/most-popular-numbers-grapes-of-math/ 
        // and space and no space
        sorted.put(0,"");
        sorted.put(1," ");
        sorted.put(2,"e");
        sorted.put(3,"a");
        sorted.put(4,"r");
        sorted.put(5,"i");
        sorted.put(6,"o");
        sorted.put(7,"t");
        sorted.put(8,"n");
        sorted.put(9,"s");
        sorted.put(10,"l");
        sorted.put(11,"c");
        sorted.put(12,"u");
        sorted.put(13,"d");
        sorted.put(14,"p");
        sorted.put(15,"m");
        sorted.put(16,"h");
        sorted.put(17,"g");
        sorted.put(18,"b");
        sorted.put(19,"f");
        sorted.put(20,"y");
        sorted.put(21,"w");
        sorted.put(22,"k");
        sorted.put(23,"v");
        sorted.put(24,"x");
        sorted.put(25,"z");
        sorted.put(26,"j");
        sorted.put(27,"q");
        sorted.put(28,"7");
        sorted.put(29,"3");
        sorted.put(30,"8");
        sorted.put(31,"4");
        sorted.put(32,"5");
        sorted.put(33,"9");
        sorted.put(34,"6");
        sorted.put(35,"2");
        sorted.put(36,"1");
        sorted.put(37,"0");

    }
    
/**************************************************

Brute Force Password

**************************************************/
    
    private void ForceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ForceMouseClicked
        // password is a maximum of six lower-case letters and digits
        // https://dzone.com/articles/java-thread-tutorial-creating-threads-and-multithr
        // hold hashed password
        String passwordHash = input.getText();


        // if either map is unpopulated call function to populate them
        if (unsorted.isEmpty() || unsorted.isEmpty())
        {
            initialiseMaps();
        }

        // get option selected in drop down box
        String method = bruteForceMethod.getItemAt(bruteForceMethod.getSelectedIndex());

        // call different method depending on option chosed
        switch (method) 
        {
            case "Simple":

                break;
            case "Simple Threaded":

                break;
            case "Dictionary":
                
                break;
            case "Dictionary Threaded":
             
                break;
            case "Rainbow":
             
                break;

               
        }
       
    }//GEN-LAST:event_ForceMouseClicked

/****************************************************************
* Function name     :
*    returns        :
*    arg1           :
* Created by        :
* Description       :
* Notes             : N/A
***************************************************************/
    
    
    
/******************Following code is taken from practical 4 word document***********************/
//
//        try {
//                textOutput.append("SHA1 hash of string: " + toHash + " =\n" +SHA1(toHash) + "\n");
//        } catch (NoSuchAlgorithmException e) {
//                // TODO Auto-generated catch block
//                e.printStackTrace();
//        } catch (UnsupportedEncodingException e) {
//                // TODO Auto-generated catch block
//                e.printStackTrace();

/******************End of Code taken from practical 4.docx***********************/

/****************************************************************
* Function name     :
*    returns        :
*    arg1           :
* Created by        :
* Description       :
* Notes             : N/A
***************************************************************/

/******************Following code is taken from measuringCPUtimeInJava.docx***********************/

// a variable to remember the start time,  use the following methods
long timer = 0;

void timeStart() {
        timer = System.currentTimeMillis();
}

void timeStop(String s) {
        timer = System.currentTimeMillis() - timer;
        if(s.equals("showMs") || s.equals(""))
            System.out.println("Time taken is " + timer + "  milliseconds");
        else if(s.equals("showSec"))
            System.out.println("Time taken is " + timer/1000 + " seconds");
        else if(s.equals("showMin")) {
            System.out.println("Time taken is " + timer/60000 + " munites and "
                    + (timer%60000)/1000 + " seconds");
        }
 }
/******************End of Code taken from measuringCPUtimeInJava.docx***********************/


//******************Following code is taken from practical 4.docx***********************/

    private static String convertToHex(byte[] data)
    {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
        	int halfbyte = (data[i] >>> 4) & 0x0F;
        	int two_halfs = 0;
        	do {
	            if ((0 <= halfbyte) && (halfbyte <= 9))
	                buf.append((char) ('0' + halfbyte));
	            else
	            	buf.append((char) ('a' + (halfbyte - 10)));
	            halfbyte = data[i] & 0x0F;
        	} while(two_halfs++ < 1);
        }
        return buf.toString();
    }

    public static String SHA1(String text)
    throws NoSuchAlgorithmException, UnsupportedEncodingException
    {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }

/******************End of Code taken from practical 4.docx***********************/

/**************************************************

END OF CUSTOM CODE

**************************************************/

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BruteForcePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BruteForcePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BruteForcePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BruteForcePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BruteForcePassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Force;
    private javax.swing.ButtonGroup bruteForceMethod;
    private javax.swing.JTextField input;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextArea textOutput;
    // End of variables declaration//GEN-END:variables
}
