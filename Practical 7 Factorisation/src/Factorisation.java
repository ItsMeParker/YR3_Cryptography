import java.awt.List;
import java.lang.Math;
import java.math.BigInteger;
import javafx.util.Pair;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author c29-parker
 */
public class Factorisation extends javax.swing.JFrame {

    /**
     * Creates new form Factorisation
     */
    public Factorisation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        intInput = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        factorisationMethod = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        textOutput = new javax.swing.JTextArea();
        factorise = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setEditable(false);
        jTextField1.setText("Number to Factorise");

        jTextField3.setEditable(false);
        jTextField3.setText("Select Method");

        factorisationMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fermat", "Dixon" }));

        textOutput.setColumns(20);
        textOutput.setRows(5);
        jScrollPane1.setViewportView(textOutput);

        factorise.setText("Factorise");
        factorise.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                factoriseMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(intInput, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(factorisationMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(factorise, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(factorisationMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(factorise))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/**************************************************

Factorisation

**************************************************/
    
    private void factoriseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_factoriseMouseClicked
        // convert string input to BigInteger with the BigInteger constructor
        BigInteger input = new BigInteger(intInput.getText());
        
        // get method of factorisation selected in drop down box
        Object selected = factorisationMethod.getSelectedItem();
        String method = selected.toString();
        
        // call different method depending on option chosen
        switch (method)
        {
            case "Fermat":
            		fermat(input);
                               
                break;
            case "Dixon":
            		dixon(input);
                break;

        }
        
        
    }//GEN-LAST:event_factoriseMouseClicked

/****************************************************************
* Function name   : fermat
*    returns      : void
*    arg1         : BigInteger : input
* Created by      : Connor Parker
* Created on      : 05/12/2018
* Description     : 
* Notes           : 
***************************************************************/
   
    private void fermat(BigInteger input)
    {
    	//
        Pair<Integer, Integer> factors = fermatFactor(input);
     
     	// output the factors  
        textOutput.append("Fermat factorisation of n = " + String.valueOf(input) + "\n");
        textOutput.append("n = xy = " + String.valueOf(factors.getKey()) + " * " + String.valueOf(factors.getValue()) + "\n\n");
    }

/****************************************************************
* Function name   : fermatFactor
*    returns      : Pair 
*    arg1         : BigInteger : input
* Created by      : Connor Parker
* Created on      : 04/12/2018
* Description     : 
* Notes           : containing the factors
***************************************************************/
   
    private Pair fermatFactor(BigInteger N)
    {
        BigInteger A, Bsq;
        boolean square = false;
        Pair<Integer, Integer> factors = new Pair<>(0,0);
        
        // A = ceiling(sqrt(N)) // use GetIntSqrt(N)+1
        A = getIntSqrt(N).add(new BigInteger("1"));
        
        // Bsq = A*A - N
        Bsq =  A.multiply(A).subtract(N);
        
        square = isSquare(Bsq);
        
        // while Bsq is not square
        while (square == false)
        {
        	// A = A + 1
            A = A.add(new BigInteger("1"));
        	
        	// Bsq = A*A - N
        	Bsq =  A.multiply(A).subtract(N);

        	// check if Bsq is now square
        	square = isSquare(Bsq);
        }
        
        // add                A - sqrt(Bsq)            and             A + sqrt(Bsq) to pair to be returned 
        factors = new Pair<>((A.subtract(getIntSqrt(Bsq)).intValue()),(A.add(getIntSqrt(Bsq)).intValue()));
        
        return factors;

    }
    
/****************************************************************
* Function name   : isSquare
*    returns      : boolean
*    arg1         : BigInteger : input
* Created by      : Connor Parker
* Created on      : 04/12/2018
* Description     : 
* Notes           : 
***************************************************************/

    private boolean isSquare(BigInteger X)
    {
    	// find square root of X to the precision of a double
    	// high precision is not important since only need to determine if X is square
    	double root = Math.sqrt(X.doubleValue());

        // find remainder of root mod 1
        double remainder = root % 1;

        // the remainder of any square number will be 0
        if (remainder == 0)
        {
            return true;
        }
        else
        {
            return false;
        }       
        
    }

/****************************************************************
* Function name   : dixon
*    returns      : void
*    arg1         : BigInteger : input
* Created by      : Connor Parker
* Created on      : 05/12/2018
* Description     : 
* Notes           : 
***************************************************************/
   
    private void dixon(BigInteger input)
    {
    	//
        int[] base = {2,3,5,7}; //,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};
     


     	// output the factors  
        textOutput.append("Dixon factorisation of n = " + String.valueOf(input) + "\n");
        //textOutput.append("n = xy = " + String.valueOf(factors.getKey()) + " * " + String.valueOf(factors.getValue()) + "\n\n");
    }
/*

    def isBsmooth(n, b):
        factors = []
        for i in b:
            while n % i == 0:
                n = int(n / i)
                if not i in factors:
                    factors.append(i)
        if n == 1 and factors == b:
            return True
        return False
*/
/****************************************************************
* Function name   : isBSmooth
*    returns      : void
*    arg1         : BigInteger  : input
*    arg2         : int[] 		: base
* Created by      : Connor Parker
* Created on      : 05/12/2018
* Description     : 
* Notes           : 
***************************************************************/
   
    private void isBSmooth(BigInteger input, int[] base)
    {
        //https://www.geeksforgeeks.org/p-smooth-numbers-p-friable-number/
    	int[] factors = {};
        boolean loop = true;
        
        int[][] powerset = {};

        // loop through all integers from 2 to largest in base
    	for (int i = 2; i < base[base.length]; i++)
    	{
            // prime factorise by i. eg while n % i == 0
            while (loop == true)
            {
            	// n = n / i
            	input = input.divide(BigInteger.valueOf(base[i]));

    		// check if n MOD element in base == 0
    		if(input.mod(BigInteger.valueOf(base[i])) == BigInteger.ZERO)
    		    loop = true;
    		else
                    loop = false;
            }
            
            
    	}


    }

  
/******************Following code is taken from sqrt_BigIntegers.docx***********************/

/****************************************************************
* Function name   : getIntSqrt
*    returns      : BigInteger : It returns s where s^2 =< x < (s+1)^2, that is s = floor(sqrt(x))
*    arg1         : BigInteger : x 
* Created by      : Rong Yang
* Created on      : 04/12/2018
* Description     : function written by Rong to help you to work out big integer sqrt
* Notes           : 
***************************************************************/

    BigInteger getIntSqrt(BigInteger x)
    {
        BigInteger s; // final result 
        BigInteger currentRes = BigInteger.valueOf(0); // init value is 0
        BigInteger currentSum = BigInteger.valueOf(0); // init value is 0
        BigInteger sum = BigInteger.valueOf(0);
        String xS = x.toString(); // change input x to a string xS
        
        int lengthOfxS = xS.length();
        int currentTwoBits;
        int i=0; // index
        if(lengthOfxS % 2 != 0) {// if odd length, add a dummy bit
            xS = "0".concat(xS); // add 0 to the front of string xS
            lengthOfxS++;
        }
            
        while(i < lengthOfxS){ // go through xS two by two, left to right
            currentTwoBits = Integer.valueOf(xS.substring(i,i+2));
            i += 2;
           
            // sum = currentSum*100 + currentTwoBits
            sum = currentSum.multiply(BigInteger.valueOf(100));
            sum = sum.add(BigInteger.valueOf(currentTwoBits));
            // subtraction loop
            do {
                currentSum = sum; // remember the value before subtract
                // in next 3 lines, we work out currentRes = sum - 2*currentRes - 1
                sum = sum.subtract(currentRes);
                currentRes = currentRes.add(BigInteger.valueOf(1)); // currentRes++
                sum = sum.subtract(currentRes);
               
            } while(sum.compareTo(BigInteger.valueOf(0)) >= 0); // stop when sum < 0
            currentRes = currentRes.subtract(BigInteger.valueOf(1)); // go one step back
            currentRes = currentRes.multiply(BigInteger.valueOf(10));
        }
        s = currentRes.divide(BigInteger.valueOf(10)); // go one step back
        return s;
    
    }
    
/**********************End of Code taken from sqrt_BigIntegers.docx******************************/

/**************************************************

END OF CUSTOM CODE

**************************************************/
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Factorisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Factorisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Factorisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Factorisation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Factorisation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> factorisationMethod;
    private javax.swing.JButton factorise;
    private javax.swing.JTextField intInput;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextArea textOutput;
    // End of variables declaration//GEN-END:variables
}
