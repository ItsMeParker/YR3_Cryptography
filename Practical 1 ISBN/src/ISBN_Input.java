/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author c29-parker
 */
public class ISBN_Input extends javax.swing.JFrame {

    /**
     * Creates new form ISBN_Input
     */
    public ISBN_Input() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        input1 = new javax.swing.JTextField();
        input2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        validationOutput = new javax.swing.JTextArea();
        verify1 = new javax.swing.JButton();
        verify2 = new javax.swing.JButton();
        calculate = new javax.swing.JButton();
        x = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        calculationOutput = new javax.swing.JTextArea();
        y = new javax.swing.JTextField();
        sym = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        input2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                input2KeyTyped(evt);
            }
        });

        validationOutput.setColumns(20);
        validationOutput.setRows(5);
        jScrollPane1.setViewportView(validationOutput);

        verify1.setText("Verify ISBN");
        verify1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                verify1MouseClicked(evt);
            }
        });

        verify2.setText("Verify Card");
        verify2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                verify2MouseClicked(evt);
            }
        });

        calculate.setText("Calculate");
        calculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calculateMouseClicked(evt);
            }
        });

        calculationOutput.setColumns(20);
        calculationOutput.setRows(5);
        jScrollPane2.setViewportView(calculationOutput);

        jTextField1.setText("MOD 11 =");

        clear.setText("Clear All");
        clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(input2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(input1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(verify1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(verify2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sym, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(verify1))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(verify2))
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(clear))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sym, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/************************************************** 
    
ISBN Checking
    
**************************************************/      
    
    private void verify1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verify1MouseClicked
        //clear previous output text
        validationOutput.setText("");
        
        // variable for each digit of the isbn to be held temporarily            
        int tempISBN = 0;
        // variable for result of check calculation to be held
        int calculation = 0;
        // get isbn that was input    
        String ISBNInput = input1.getText();
        
        //remove dashes from isbn
        ISBNInput = ISBNInput.replace("-", "");  
        
        // for 10 digit ISBN number
        if (ISBNInput.length() == 10) 
        {
            /* loop through isbn input and put numbers into variable then  
             * perform calculations for validation*/
            for (int x = 0; x < 9; x++)
            {
                // convert character into integer and store temp variable
                tempISBN = Integer.parseInt(String.valueOf(ISBNInput.charAt(x)));
                
                /* to perform (d1+(2*d2)+(3*d3)+. . . +(9*d9)) 
                 * x + 1 to account for x starting at 0      */
                calculation = calculation + ((x + 1) * tempISBN);

            }
            // check if 10th digit is an x
            if (((ISBNInput.charAt(9)) == 'x') || ((ISBNInput.charAt(9)) == 'X'))
            {                
                tempISBN = 10;                
            }
            else
            {
                // convert character into integer and store temp variable
                tempISBN = Integer.parseInt(String.valueOf(ISBNInput.charAt(9)));
            }
            
            // to perform MOD 11 
            calculation = calculation % 11;
        
            validationOutput.append("10 Digit ISBN Input is ");
        
            // compare calculation result to check digit
            if (calculation == tempISBN)
            {
                validationOutput.append("Valid \n");
            }
            else
            {
                validationOutput.append("INVALID \n");
                validationOutput.append("Validation Result: " + String.valueOf(calculation));
            }      
        }
        // for 13 digit ISBN number
        else if (ISBNInput.length() == 13)
        {
            /* loop through isbn input and put numbers into variable then  
             * perform calculations for validation only first 12 digits*/
            for (int x = 0; x < 12; x++)
            {
                // convert character into integer and store in temp variable
                tempISBN = Integer.parseInt(String.valueOf(ISBNInput.charAt(x)));
                
                // to perform ((1*d1)+(3*d2)+(1*d3)+(3*d4). . . +(3*d12))
                if ((x % 2) == 0)
                {
                    calculation = calculation + (1 * tempISBN);
                }
                else
                {
                    calculation = calculation + (3 * tempISBN);
                }
            }
            
            // convert 13th ISBN digit to integer
            tempISBN = Integer.parseInt(String.valueOf(ISBNInput.charAt(12)));
            // to perform MOD 10           
            calculation = calculation % 10;
            
            validationOutput.append("13 Digit ISBN Input is "); 
            // compare calculation result to check digit
            if (( calculation == 0 ) || ( (10 - calculation) == tempISBN ))
            {
                validationOutput.append("Valid \n");
            }
            else
            {
                validationOutput.append("INVALID \n");
                validationOutput.append("Validation Result: " + String.valueOf(calculation));
            }     
        }
        // incorrect length
        else    
        {
            validationOutput.append("ISBN Of Wrong Length");
        } 
 
        
    }//GEN-LAST:event_verify1MouseClicked

/************************************************** 
    
Credit Card Checking
    
**************************************************/        
    
    private void verify2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verify2MouseClicked
        //clear previous ouptut text
        validationOutput.setText("");
        
        // variable for each digit of the card to be held temporarily            
        int tempCARD = 0;
        // variable for result of check calculation to be held
        int calculation = 0;
        // get card number that was input    
        String CARDInput = input2.getText();
        //remove dashes from card number
        CARDInput = CARDInput.replace("-", ""); 
        
        if (CARDInput.length() == 16)
        {
            // loop through the 16 numbers in the card
            for (int x = 0; x < 16; x++)
            {
                // convert character into integer and store temp variable
                tempCARD = Integer.parseInt(String.valueOf(CARDInput.charAt(x)));
                
                // double every alternate number and add totals
                if ((x % 2) == 0)
                {
                    // check if double of alternate number is greate than 10
                    if ((2 * tempCARD) < 10)
                    {
                        calculation = calculation + (2 * tempCARD);
                    }
                    else
                    {
                        calculation = calculation + ((2 * tempCARD) - 9);
                    }
                    
                }
                else
                {
                    calculation = calculation + tempCARD;                    
                }
            }
            
            // to perform MOD 10           
            calculation = calculation % 10;
            
            validationOutput.append("Card Number Input is "); 
            
            if ( calculation == 0 )
            {
                validationOutput.append("Valid \n");
            }
            else
            {
                validationOutput.append("INVALID \n");
                validationOutput.append("Validation Result: " + String.valueOf(calculation));
            }  
            
        } // end of if card == 16
        else
        {
            validationOutput.append("Card Number Of Wrong Length");
        }
    }//GEN-LAST:event_verify2MouseClicked

/************************************************** 
    
Auto Format Card Input

Note: Doesn't work with copy paste    
**************************************************/
    
    private void input2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input2KeyTyped
        String cardInput = input2.getText();
        // add dashes to input autmatically for ease of reading
        if (cardInput.length() == 4)
        {
            input2.setText(input2.getText() + "-");
        }
        if (cardInput.length() == 9)
        {
            input2.setText(input2.getText() + "-");
        }
        if (cardInput.length() == 14)
        {
            input2.setText(input2.getText() + "-");
        }
    }//GEN-LAST:event_input2KeyTyped

/************************************************** 
    
Clear Form
  
**************************************************/    
    
    private void clearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearMouseClicked
        //clear all text
        validationOutput.setText("");
        input1.setText("");
        input2.setText("");
        x.setText("");
        sym.setText("");
        y.setText("");
        calculationOutput.setText("");
    }//GEN-LAST:event_clearMouseClicked

/************************************************** 
    
Calculate Modular Maths
  
**************************************************/      
    
    private void calculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calculateMouseClicked
        String symbol = sym.getText();
        int tempNum = 0;
        int X = 0;
        int Y = 0;
        
        calculationOutput.setText("");
        // fill x and y variables if present in the form
        if (x.getText() != " ")
        {
            X = Integer.parseInt(String.valueOf(x.getText()));
        }
        if (y.getText() != " ")
        {
            Y = Integer.parseInt(String.valueOf(y.getText()));
        }

        // switch to determine which modular action to perform
        switch (symbol)
        {
            case "+":
                // perform calculation (X + Y) mod 11 simplified to ((X mod 11)+(Y mod 11) mod 11)
                tempNum = ((X % 11) + (Y % 11)) % 11;
                // check and correct negative value
                if (tempNum < 0)                
                {
                    tempNum = 11 + tempNum;
                }
                // output answer
                calculationOutput.setText("(" + String.valueOf(X) + " + " + String.valueOf(Y) + ") MOD 11 = " + String.valueOf(tempNum));
                break;
            case "*": 
                // perform calculation (X * Y)mod 11 simplified to((X mod 11)*(Y mod 11) mod 11)
                tempNum = ((X % 11) * (Y % 11)) % 11;
                // check and correct negative value
                if (tempNum < 0)                
                {
                    tempNum = 11 + tempNum;
                }
                // output answer 
                calculationOutput.setText("(" + String.valueOf(X) + " * " + String.valueOf(Y) + ") MOD 11 = " + String.valueOf(tempNum));
                break;
            case "/":
                
                // invert Y to for later use 
                tempNum = (X * inverse(Y,11)) % 11;                
                
                // perform calculation (x * y^-1) MOD 11 simplified to ((X mod 11)*(Y mod 11) mod 11)                
                // = ((X % 11) * (Y % 11)) % 11;
                
                if (tempNum < 0)                
                {
                    tempNum = 11 + tempNum;
                }
                // output answer 
                calculationOutput.setText("(" + String.valueOf(X) + " / " + String.valueOf(Y) + ") MOD 11 = " + String.valueOf(tempNum));
                break;
            default:
                calculationOutput.setText("Invalid Symbol");
                break;
        }
        
        
    }//GEN-LAST:event_calculateMouseClicked
    
/****************************************************************
* Function name     : inverse
*    returns        : int                     
*    arg1           : int : value of integer to return the inverse of 
*    arg2           : int : value arg1 will be moduloded by
* Created by        : Rong Yang
* Source            : Cryptography lecture 2 Hamming Codes page 31
* Description       : Extended Euclidean Algorithm of calculating inverse                    
* Notes             : N/A
***************************************************************/
        
    public int inverse(int a, int n) { 
	int t = 0; int newt = 1; 
	int r = n; int newr = a;    int q, temp;  
	while(newr != 0) { 
		q = r / newr;  /* integer division */        
		temp = newt;   /* remember newt    */
		newt = t - q*newt;
		t = temp;
		temp = newr;   /* remember newr    */
		newr = r - q*newr;
		r = temp;
	} 
 	if(r > 1) return -1; /* not invertible */
	if(t < 0) t = t + n; /* change to positive */
	return t;
    }

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ISBN_Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ISBN_Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ISBN_Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ISBN_Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ISBN_Input().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculate;
    private javax.swing.JTextArea calculationOutput;
    private javax.swing.JButton clear;
    private javax.swing.JTextField input1;
    private javax.swing.JTextField input2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField sym;
    private javax.swing.JTextArea validationOutput;
    private javax.swing.JButton verify1;
    private javax.swing.JButton verify2;
    private javax.swing.JTextField x;
    private javax.swing.JTextField y;
    // End of variables declaration//GEN-END:variables
}
